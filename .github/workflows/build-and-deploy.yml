name: Build and Deploy Electron App

on:
  push:
    branches: [main]
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            artifact-name: fos-printer-linux
          - os: macos-latest
            platform: mac
            artifact-name: fos-printer-mac
          - os: windows-latest
            platform: win
            artifact-name: fos-printer-win

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "yarn"

      - name: Install yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build Electron app
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "mac" ]; then
            yarn electron:build:mac
          elif [ "${{ matrix.platform }}" = "win" ]; then
            yarn electron:build:win
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            yarn electron:build:linux
          fi

      - name: Create zip files
        shell: bash
        run: |
          cd release

          # List all files in release directory for debugging
          echo "Files in release directory:"
          ls -la

          # Create platform-specific zip files with flexible file matching
          if [ "${{ matrix.platform }}" = "mac" ]; then
            # Find macOS DMG file
            DMG_FILE=$(find . -name "*.dmg" -type f | head -1)
            if [ -n "$DMG_FILE" ]; then
              # Create README.md with installation instructions for macOS
              echo "# Food Order Printer - macOS Installation" > ../README.md
              echo "" >> ../README.md
              echo "## If you see \"damaged\" error when trying to open the app:" >> ../README.md
              echo "" >> ../README.md
              echo "1. Open Terminal (Applications > Utilities > Terminal)" >> ../README.md
              echo "2. Navigate to where you extracted the DMG file" >> ../README.md
              echo "3. Run this command:" >> ../README.md
              echo "   \`\`\`bash" >> ../README.md
              echo "   xattr -cr \"Food Order Printer.app\"" >> ../README.md
              echo "   \`\`\`" >> ../README.md
              echo "4. Now you can open the app normally" >> ../README.md
              echo "" >> ../README.md
              echo "## Why this happens:" >> ../README.md
              echo "macOS Gatekeeper blocks unsigned apps for security. This is normal for open-source projects that aren't code-signed with an Apple Developer certificate." >> ../README.md
              echo "" >> ../README.md
              echo "## Alternative method:" >> ../README.md
              echo "Right-click the app and select \"Open\" from the context menu, then click \"Open\" in the security dialog." >> ../README.md
              
              # Create zip with both DMG and README
              zip -r ../${{ matrix.artifact-name }}.zip "$DMG_FILE" ../README.md
              echo "✅ Created ${{ matrix.artifact-name }}.zip with $DMG_FILE and README.md"
            else
              echo "❌ No DMG file found for macOS - build may have failed"
              exit 1
            fi
          elif [ "${{ matrix.platform }}" = "win" ]; then
            # Find Windows EXE file
            EXE_FILE=$(find . -name "*.exe" -type f | head -1)
            if [ -n "$EXE_FILE" ]; then
              # Use PowerShell to create zip on Windows
              powershell -Command "Compress-Archive -Path '$EXE_FILE' -DestinationPath '../${{ matrix.artifact-name }}.zip' -Force"
              echo "✅ Created ${{ matrix.artifact-name }}.zip with $EXE_FILE"
            else
              echo "❌ No EXE file found for Windows - build may have failed"
              exit 1
            fi
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            # Find Linux AppImage file
            APPIMAGE_FILE=$(find . -name "*.AppImage" -type f | head -1)
            if [ -n "$APPIMAGE_FILE" ]; then
              zip -r ../${{ matrix.artifact-name }}.zip "$APPIMAGE_FILE"
              echo "✅ Created ${{ matrix.artifact-name }}.zip with $APPIMAGE_FILE"
            else
              echo "❌ No AppImage file found for Linux - build may have failed"
              exit 1
            fi
          fi

          # Verify zip file was created
          if [ ! -f "../${{ matrix.artifact-name }}.zip" ]; then
            echo "❌ Zip file was not created successfully"
            exit 1
          fi

          echo "✅ Zip file verification complete: ${{ matrix.artifact-name }}.zip"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}-${{ matrix.os }}
          path: ${{ matrix.artifact-name }}.zip
          retention-days: 30

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Create final zip files
        run: |
          echo "📦 Creating final zip files for GitHub Pages..."

          # Create docs directory if it doesn't exist
          mkdir -p docs

          # Copy the index.html to docs (if it exists)
          if [ -f "docs/index.html" ]; then
            echo "✅ index.html found and copied"
          else
            echo "❌ Error: docs/index.html not found"
            exit 1
          fi

          # Find and copy zip files from artifacts
          echo "📁 Copying zip files from artifacts..."
          ZIP_COUNT=0
          find artifacts -name "*.zip" -type f | while read file; do
            filename=$(basename "$file")
            echo "  📋 Copying $filename to docs/"
            cp "$file" "docs/$filename"
            ZIP_COUNT=$((ZIP_COUNT + 1))
          done

          # Check if we have the expected zip files
          echo "📊 Checking zip files..."
          if [ -f "docs/fos-printer-mac.zip" ] && [ -f "docs/fos-printer-win.zip" ] && [ -f "docs/fos-printer-linux.zip" ]; then
            echo "✅ All platform-specific zip files found"
            
            # Create all-platforms zip
            echo "📦 Creating fos-printer-app.zip with all platforms..."
            cd docs
            zip fos-printer-app.zip fos-printer-mac.zip fos-printer-win.zip fos-printer-linux.zip
            cd ..
            echo "✅ fos-printer-app.zip created"
          else
            echo "⚠️  Missing some platform zip files:"
            ls -la docs/*.zip 2>/dev/null || echo "No zip files found"
          fi

          # Get version from package.json
          VERSION=$(node -p "require('./package.json').version")
          echo "📝 Creating version.json with version: $VERSION"
          cat > docs/version.json << EOF
          {
            "version": "$VERSION",
            "buildDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "commit": "${{ github.sha }}",
            "buildNumber": "${{ github.run_number }}"
          }
          EOF

          # List files in docs directory
          echo "📋 Files in docs directory:"
          ls -la docs/

          # Verify required files exist
          echo "🔍 Verifying required files for deployment..."
          REQUIRED_FILES=("index.html" "version.json" "fos-printer-mac.zip" "fos-printer-win.zip" "fos-printer-linux.zip" "fos-printer-app.zip")
          MISSING_FILES=()

          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "docs/$file" ]; then
              MISSING_FILES+=("$file")
            else
              echo "✅ $file found"
            fi
          done

          if [ ${#MISSING_FILES[@]} -gt 0 ]; then
            echo "❌ Missing required files: ${MISSING_FILES[*]}"
            exit 1
          fi

          echo "🎉 All required files verified successfully!"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

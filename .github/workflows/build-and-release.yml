name: Build and Deploy Printer App

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  pages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macos-latest
          # - windows-latest
          - ubuntu-latest
        include:
          - os: macos-latest
            platform: mac
            extension: .dmg
          # - os: windows-latest
          #   platform: win
          #   extension: .exe
          - os: ubuntu-latest
            platform: linux
            extension: .AppImage

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: üß∂ Install Yarn
        run: npm install -g yarn

      - name: üíæ Cache Electron
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: electron-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            electron-${{ runner.os }}-

      - name: üì¶ Install dependencies
        run: yarn install --frozen-lockfile

      - name: üî® Build application
        run: yarn build

      - name: üèóÔ∏è Build executable
        run: yarn dist --${{ matrix.platform }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üì§ Upload artifacts
        if: ${{ env.ACT != 'true' || env.ACT == '' }}
        uses: actions/upload-artifact@v4
        with:
          name: fos-printer-${{ matrix.platform }}
          path: release/
          retention-days: 30

      - name: üìÅ Create local artifacts (for testing)
        if: ${{ env.ACT == 'true' }}
        run: |
          mkdir -p ../artifacts
          cp -r release/ ../artifacts/fos-printer-${{ matrix.platform }}/

  package:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì• Download all artifacts
        if: ${{ env.ACT != 'true' || env.ACT == '' }}
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: üìÅ Use local artifacts (for testing)
        if: ${{ env.ACT == 'true' }}
        run: |
          echo "Using local artifacts for testing"
          if [ -d "artifacts" ]; then
            echo "Artifacts directory found:"
            ls -la artifacts/
          else
            echo "No artifacts directory found, creating mock artifacts for testing..."
            mkdir -p artifacts/fos-printer-linux
            echo "Mock artifact created for testing"
          fi

      - name: üì¶ Create release package
        run: |
          echo "=== STARTING RELEASE PACKAGE CREATION ==="
          echo "Current directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la

          mkdir -p pages

          # Check if artifacts directory exists
          if [ ! -d "artifacts" ]; then
            echo "ERROR: artifacts directory not found!"
            echo "Make sure to run the build job first or set ACT=true for local testing"
            exit 1
          fi

          cd artifacts

          echo "=== ARTIFACTS DIRECTORY CONTENTS ==="
          echo "Current directory: $(pwd)"
          echo "Contents:"
          ls -la
          echo "Total artifacts size: $(du -sh .)"

          echo "=== DETAILED ARTIFACT ANALYSIS ==="
          for platform in fos-printer-*; do
            if [ -d "$platform" ]; then
              echo ""
              echo "--- PLATFORM: $platform ---"
              echo "Directory size: $(du -sh "$platform")"
              echo "Contents:"
              ls -la "$platform"
              
              echo ""
              echo "--- LARGEST FILES IN $platform ---"
              find "$platform" -type f -exec du -h {} \; | sort -hr | head -10
              
              echo ""
              echo "--- FILE TYPES IN $platform ---"
              find "$platform" -type f | sed 's/.*\.//' | sort | uniq -c | sort -nr | head -20
            fi
          done

          echo ""
          echo "=== COPYING FILES TO PAGES ==="
          # Copy individual platform files directly (no zipping of DMG/AppImage)
          for platform in fos-printer-*; do
            if [ -d "$platform" ]; then
              echo ""
              echo "--- PROCESSING $platform ---"
              cd "$platform"
              echo "Current directory: $(pwd)"
              
              # Copy only the final distributable files (exclude build artifacts)
              echo "Finding distributable files..."
              for file in *.dmg *.exe *.AppImage *.deb *.rpm; do
                if [ -f "$file" ]; then
                  echo "Found file: $file"
                  echo "File size: $(ls -lh "$file")"
                  echo "Copying: $file to ../../pages/"
                  cp "$file" "../../pages/"
                  echo "Copy completed for: $file"
                fi
              done
              cd ..
            fi
          done

          cd ..

          echo ""
          echo "=== PAGES DIRECTORY AFTER COPYING ==="
          echo "Current directory: $(pwd)"
          echo "Pages directory contents:"
          ls -la pages/
          echo "Pages directory size: $(du -sh pages/)"

          echo ""
          echo "=== DETAILED PAGES CONTENTS ==="
          find pages/ -type f -exec ls -lh {} \;

          echo ""
          echo "=== SKIPPING COMBINED ZIP (users can download individual files) ==="
          echo "Individual files are sufficient for distribution"

          echo ""
          echo "=== FINAL PAGES DIRECTORY ==="
          echo "Current directory: $(pwd)"
          echo "Pages directory contents:"
          ls -la pages/
          echo "Pages directory size: $(du -sh pages/)"

          echo ""
          echo "=== COPYING WEB FILES ==="
          # Copy HTML page and create version info for GitHub Pages
          echo "Copying docs/index.html..."
          cp docs/index.html pages/
          echo "HTML file copied"

          # Create version.json with commit SHA
          VERSION="dev-${GITHUB_SHA::8}"
          echo "Creating version.json with version: $VERSION"
          echo '{"version": "'$VERSION'", "buildDate": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}' > pages/version.json
          echo "Version file created"

          echo ""
          echo "=== FINAL PAGES DIRECTORY CONTENTS ==="
          ls -la pages/
          echo "Final pages directory size: $(du -sh pages/)"

          echo ""
          echo "=== SUMMARY ==="
          echo "Individual files in pages/:"
          find pages/ -type f -name "*.dmg" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" | while read -r file; do
            echo "  $(basename "$file"): $(du -h "$file" | cut -f1)"
          done
          echo "Total pages size: $(du -sh pages/ | cut -f1)"

          echo "=== RELEASE PACKAGE CREATION COMPLETE ==="

      - name: ‚öôÔ∏è Setup Pages
        if: ${{ env.ACT != 'true' || env.ACT == '' }}
        uses: actions/configure-pages@v4

      - name: üì§ Upload to Pages
        if: ${{ env.ACT != 'true' || env.ACT == '' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: pages

      - name: üöÄ Deploy to GitHub Pages
        if: ${{ env.ACT != 'true' || env.ACT == '' }}
        id: deployment
        uses: actions/deploy-pages@v4

      - name: üìã Show local results (for testing)
        if: ${{ env.ACT == 'true' }}
        run: |
          echo "=== LOCAL TESTING RESULTS ==="
          echo "Pages directory contents:"
          ls -la pages/
          echo ""
          echo "Files created:"
          find pages/ -type f -exec ls -lh {} \;
          echo ""
          echo "Total size: $(du -sh pages/)"
          echo ""
          echo "‚úÖ Local testing completed successfully!"
          echo "In real GitHub Actions, these files would be deployed to GitHub Pages."

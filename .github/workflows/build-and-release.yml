name: Build and Deploy Printer App

on:
  push:
    branches:
      - main
  workflow_dispatch: null

permissions:
  contents: read
  id-token: write
  pages: write

jobs:
  build:
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        os:
          - macos-latest
          - windows-latest
          - ubuntu-latest
        include:
          - os: macos-latest
            platform: mac
            extension: .dmg
          - os: windows-latest
            platform: win
            extension: .exe
          - os: ubuntu-latest
            platform: linux
            extension: .AppImage

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: yarn

      - name: Cache Electron
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: electron-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            electron-${{ runner.os }}-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build application
        run: yarn build

      - name: Build executable
        run: "yarn dist --${{ matrix.platform }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "fos-printer-${{ matrix.platform }}"
          path: release/
          retention-days: 30

  package:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: "${{ steps.deployment.outputs.page_url }}"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release package
        run: |
          mkdir -p pages
          cd artifacts

          # Copy individual platform files directly (no zipping of DMG/AppImage)
          for platform in fos-printer-*; do
            if [ -d "$platform" ]; then
              cd "$platform"
              # Copy only the final distributable files (exclude build artifacts)
              find . -maxdepth 1 -name "*.dmg" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" | while read -r file; do
                cp "$file" "../../pages/"
              done
              cd ..
            fi
          done

          cd ..

          # Create a simple zip with just the executables (no nested directories)
          cd pages
          zip fos-printer-app.zip *.dmg *.exe *.AppImage *.deb *.rpm 2>/dev/null || true
          cd ..

          # Copy HTML page and create version info for GitHub Pages
          cp docs/index.html pages/

          # Create version.json with commit SHA
          VERSION="dev-${GITHUB_SHA::8}"
          echo '{"version": "'$VERSION'", "buildDate": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}' > pages/version.json

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
